/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-02-04 00:14:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("	\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!-- jQuery -->\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n");
      out.write("	integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\n");
      out.write("	crossorigin=\"anonymous\"></script>\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");

Connection connection = null;
// DB Driver
String dbDriver = "org.postgresql.Driver"; 
// DB URL
// IP:PORT/스키마 
String dbUrl = "jdbc:postgresql://cfljfb1quhols5.cluster-czrs8kj4isg7.us-east-1.rds.amazonaws.com:5432/d65eoloovved56?user=u37m7gk2uqdr49&password=pa7760e461993f6fc7dd1f5afc4466283266a56f5ac19362f3139c85875861d0f";
	
// DB ID/PW
String dbUser = "u37m7gk2uqdr49";
String dbPassword = "pa7760e461993f6fc7dd1f5afc4466283266a56f5ac19362f3139c85875861d0f";
Statement stmt = null;

String id = null;
String name = null;
String writer = null;
String dtm = null;
String mDtm = null;
try {
	
    Class.forName(dbDriver);
    connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword);

    stmt = connection.createStatement();
    String query="select * from board";
    
    
    PreparedStatement pstmt = connection.prepareStatement(query);
    ResultSet rs = pstmt.executeQuery();
    
    if(rs.next()){
    	System.out.println("DB Connection [성공]");
        System.out.println(rs.getString("board_name"));
        id = rs.getString("board_id");
        name = rs.getString("board_name");
        writer = rs.getString("board_writer");
        dtm  = rs.getString("board_register_dtm");
        mDtm =  rs.getString("board_modify_dtm");
        
    }
    
    
}catch (SQLException e) {
    e.printStackTrace();
} catch (ClassNotFoundException e) {
    e.printStackTrace();
}





      out.write("\n");
      out.write("<script>\n");
      out.write("	\n");
      out.write("</script>\n");
      out.write("<body>\n");
      out.write("	<table width=\"100%\"\n");
      out.write("		class=\"table table-striped table-bordered table-hover\">\n");
      out.write("		<thead>\n");
      out.write("			<tr>\n");
      out.write("				<th>#번호</th>\n");
      out.write("				<th>제목</th>\n");
      out.write("				<th>작성자</th>\n");
      out.write("				<th>작성일</th>\n");
      out.write("				<th>수정일</th>\n");
      out.write("			</tr>\n");
      out.write("		</thead>\n");
      out.write("		<tbody>\n");
      out.write("			<c:forEach items=\"\" var=\"board\">\n");
      out.write("				<tr class=\"odd gradeX\">\n");
      out.write("					<td><c:out value= \"");
      out.print( id);
      out.write("\" /> ");
      out.print( id);
      out.write("</td>\n");
      out.write("					<td><c:out value=\"");
      out.print( name);
      out.write("\" /> ");
      out.print( name);
      out.write("</td>\n");
      out.write("					<td><c:out value=\"\" />");
      out.print( writer );
      out.write("</td>\n");
      out.write("					<td><fmt:formatDate pattern=\"yyyy-MM-dd\" value=\"\" />");
      out.print( dtm );
      out.write("</td>\n");
      out.write("					<td><fmt:formatDate pattern=\"yyyy-MM-dd\" value=\"\" />");
      out.print( mDtm );
      out.write("</td>\n");
      out.write("				</tr>\n");
      out.write("			</c:forEach>\n");
      out.write("		</tbody>\n");
      out.write("	</table>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
